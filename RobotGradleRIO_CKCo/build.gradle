plugins {
    id "java"
    id "idea"
    id "edu.wpi.first.GradleRIO" version "2020.2.2"
    id "com.google.protobuf" version "0.8.11"
    id "org.hidetake.ssh" version "2.10.1"
}

repositories {
	maven {
		url "https://raw.githubusercontent.com/frcteam195/CKMavenRepo/master"
		content {
			includeGroup 'com.team195'
		}
	}
	
	mavenCentral()
	jcenter()
}

def ROBOT_MAIN_CLASS = "com.team195.frc.rio.Main"
def TEAM = 195

remotes {
	raspi{
		host = '10.1.95.19'
		user = 'root'
		password = '195'
	}
	rio{
		host = '10.1.95.2'
		user = 'admin'
		password = ''
	}
}

ssh.settings {
	knownHosts = allowAnyHosts
}

task deployRIOIPKs {

	doLast {
		project.logger.lifecycle("Deploying RIO IPKs")
		ssh.run {
			session(remotes.rio) {
				execute 'sudo mkdir -p /tmp/ipks'
				put from: fileTree(dir: 'ipks/'), into: '/tmp/ipks'
// 				execute 'sudo chmod -R 777 /tmp/ipks'
// 				execute 'for f in /tmp/*.ipk do sudo opkg install "$f"; done' //*/
// 				execute 'sudo rm -Rf /tmp/ipks'
// 				execute 'sudo sync'
			}
		}
	}
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = TEAM
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
            
			jvmArgs = [ "-XX:+UseG1GC",
						"-XX:MaxGCPauseMillis=10"
						]
			
			//Specify robot command to remove concurrent mark sweeper GC command
			robotCommand = "/usr/local/frc/JRE/bin/java -Djava.library.path=/usr/local/frc/third-party/lib -Djava.lang.invoke.stringConcat=BC_SB " + jvmArgs.join(" ") + " " + (debug ? debugFlags : "") + " -jar \"<<BINARY>>\"" + arguments.join(" ")
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
    
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)

	compile 'com.google.protobuf:protobuf-java:3.11.1'
	compile 'com.team195:CKIllposedOSCLib:0.0.1'
	compile 'org.zeromq:jzmq:3.1.0'
	//Good jzmq example: https://dzone.com/articles/working-zeromq-java-and-jzmq

    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    // In Java for now, the argument must be false
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)

    testImplementation 'junit:junit:4.12'
}

protobuf {
  generatedFilesBaseDir = "$projectDir/src/generated"
  
  protoc {
    // Download from repositories
    artifact = 'com.google.protobuf:protoc:3.11.2'
  }
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    
    doLast {
        def folder = new File( "${rootDir}/build/classes/java/main/edu/wpi" )
		if (folder.exists()) {
			project.logger.lifecycle("Overriding WPILibJ Classes")
			
			if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
				def tmpFolder = new File ( "${rootDir}/build/libs/tmpDir" )
				if (tmpFolder.exists()) {
					exec {
						executable "rm"
						args "-Rf","${tmpFolder.getAbsolutePath()}"
					}
				}
			
				tmpFolder.mkdirs()
			
				exec {
					executable "sh"
					args "-c","cd ${tmpFolder.getAbsolutePath()}; jar -xvf ${jar.archivePath}"
				}
			
				exec {
					executable "sh"
					args "-c","cp -fr ${rootDir}/build/classes/java/main/edu/wpi/* ${tmpFolder.getAbsolutePath()}/edu/wpi/"
				}
				
				exec {
					executable "rm"
					args "-Rf"," ${jar.archivePath}"
				}
				
				exec {
					executable "sh"
					args "-c","jar -cmvf ${tmpFolder.getAbsolutePath()}/META-INF/MANIFEST.MF ${jar.archivePath} -C ${tmpFolder.getAbsolutePath()} ."
				}
			}
		}
    }
}
